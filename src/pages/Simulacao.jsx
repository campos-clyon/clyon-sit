import { useState, useRef, useEffect } from 'react'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Textarea } from '@/components/ui/textarea'
import { 
  Bot, 
  User, 
  Send, 
  Loader2, 
  Calculator,
  MessageCircle,
  Phone,
  AlertCircle,
  CheckCircle,
  Lightbulb
} from 'lucide-react'

const Simulacao = () => {
  const [messages, setMessages] = useState([
    {
      role: 'assistant',
      content: 'Ol√°! Sou o assistente virtual da CLYON. Vou ajud√°-lo a simular um or√ßamento para recolha de res√≠duos. Para come√ßar, pode descrever-me que tipo de material precisa de recolher e onde se localiza?'
    }
  ])
  const [inputMessage, setInputMessage] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [showContactForm, setShowContactForm] = useState(false)
  const messagesEndRef = useRef(null)

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  const handleSendMessage = async () => {
    if (!inputMessage.trim() || isLoading) return

    const userMessage = inputMessage.trim()
    setInputMessage('')
    setIsLoading(true)

    // Adicionar mensagem do usu√°rio
    setMessages(prev => [...prev, { role: 'user', content: userMessage }])

    try {
      // Simular chamada √† API OpenAI
      // Em produ√ß√£o, esta seria uma chamada real √† API
      const response = await simulateGPTResponse(userMessage, messages)
      
      // Adicionar resposta do assistente
      setMessages(prev => [...prev, { role: 'assistant', content: response }])
    } catch (error) {
      setMessages(prev => [...prev, { 
        role: 'assistant', 
        content: 'Desculpe, ocorreu um erro. Por favor, tente novamente ou contacte-nos diretamente.' 
      }])
    } finally {
      setIsLoading(false)
    }
  }

  const simulateGPTResponse = async (userMessage, previousMessages) => {
    // Simular delay da API
    await new Promise(resolve => setTimeout(resolve, 1500))

    const message = userMessage.toLowerCase()
    
    // L√≥gica de resposta baseada em palavras-chave
    if (message.includes('entulho') || message.includes('constru√ß√£o') || message.includes('obra')) {
      return `Entendo que precisa de recolha de entulho de constru√ß√£o. Para um or√ßamento mais preciso, preciso de saber:

üìç **Localiza√ß√£o:** Em que cidade/zona se encontra?
üìè **Quantidade:** Aproximadamente quantos m¬≥ ou sacos de entulho?
üèóÔ∏è **Tipo de material:** Tijolos, bet√£o, azulejos, madeira, etc.?
üöö **Acesso:** O cami√£o consegue chegar perto ou √© preciso transporte manual?

**Estimativa inicial:** Entre 80‚Ç¨-200‚Ç¨ dependendo da quantidade e localiza√ß√£o.

Pode fornecer mais detalhes para um or√ßamento mais preciso?`
    }
    
    if (message.includes('m√≥veis') || message.includes('eletrodom√©sticos') || message.includes('sof√°')) {
      return `Perfeito! Para recolha de m√≥veis e eletrodom√©sticos, preciso de saber:

üè† **Localiza√ß√£o:** Cidade e se √© moradia ou apartamento?
üì¶ **Itens:** Que m√≥veis/eletrodom√©sticos espec√≠ficos?
üè¢ **Andar:** Se for apartamento, que andar e tem elevador?
üìÖ **Urg√™ncia:** Precisa de recolha urgente?

**Estimativa inicial:** 
- M√≥veis pequenos: 30‚Ç¨-60‚Ç¨
- Eletrodom√©sticos grandes: 40‚Ç¨-80‚Ç¨
- Conjunto de m√≥veis: 100‚Ç¨-250‚Ç¨

Que itens espec√≠ficos tem para recolher?`
    }
    
    if (message.includes('jardim') || message.includes('folhas') || message.includes('ramos') || message.includes('verde')) {
      return `√ìtimo! Para recolha de res√≠duos de jardim:

üå≥ **Tipo de res√≠duos:** Folhas, ramos, relva cortada, podas?
üìè **Quantidade:** Quantos sacos ou m¬≥ aproximadamente?
üìç **Localiza√ß√£o:** Em que cidade?
üöö **Acesso:** O cami√£o consegue chegar ao jardim?

**Estimativa inicial:**
- At√© 5 sacos: 40‚Ç¨-70‚Ç¨
- 5-15 sacos: 70‚Ç¨-120‚Ç¨
- Grandes quantidades: 120‚Ç¨-200‚Ç¨

Pode descrever melhor o tipo e quantidade de res√≠duos verdes?`
    }
    
    if (message.includes('pre√ßo') || message.includes('custo') || message.includes('‚Ç¨') || message.includes('euro')) {
      return `Os nossos pre√ßos dependem de v√°rios fatores:

üí∞ **Fatores que influenciam o pre√ßo:**
- Tipo e quantidade de res√≠duo
- Localiza√ß√£o e dist√¢ncia
- Dificuldade de acesso
- Urg√™ncia do servi√ßo
- Custos de descarte

üìã **Pre√ßos base (incluem IVA):**
- Servi√ßo m√≠nimo: 40‚Ç¨
- Recolha standard: 80‚Ç¨-150‚Ç¨
- Grandes volumes: 150‚Ç¨-300‚Ç¨+

Para um or√ßamento exato, preciso de mais detalhes sobre o seu caso espec√≠fico. Pode descrever o que precisa de recolher?`
    }
    
    if (message.includes('lisboa') || message.includes('cascais') || message.includes('sintra') || message.includes('set√∫bal')) {
      const cidade = message.includes('lisboa') ? 'Lisboa' : 
                   message.includes('cascais') ? 'Cascais' :
                   message.includes('sintra') ? 'Sintra' : 'Set√∫bal'
      
      return `Excelente! Atendemos ${cidade} regularmente. 

üöö **Para ${cidade}:**
- Recolha no mesmo dia (se dispon√≠vel)
- Sem taxa de desloca√ß√£o adicional
- Equipa local conhece bem a √°rea

Agora preciso de saber:
- Que tipo de res√≠duo tem para recolher?
- Qual a quantidade aproximada?
- Tem alguma urg√™ncia espec√≠fica?

Com estas informa√ß√µes posso dar-lhe um or√ßamento mais preciso!`
    }
    
    if (message.includes('urgente') || message.includes('hoje') || message.includes('amanh√£')) {
      return `Compreendo que precisa de um servi√ßo urgente! 

‚ö° **Servi√ßos urgentes:**
- Dispon√≠vel no mesmo dia (sujeito a disponibilidade)
- Taxa adicional de urg√™ncia: +25‚Ç¨
- Contacto direto: +351 931 632 622
- WhatsApp 24h para emerg√™ncias

Para servi√ßos urgentes, recomendo que me contacte diretamente por telefone ap√≥s esta simula√ß√£o.

Pode descrever-me o que precisa de recolher urgentemente?`
    }
    
    if (message.includes('obrigado') || message.includes('obrigada') || message.includes('ok') || message.includes('sim')) {
      return `De nada! Fico feliz por ajudar! üòä

Se quiser um or√ßamento oficial ou agendar o servi√ßo, pode:

üìû **Contactar-nos diretamente:**
- Telefone: +351 931 632 622
- WhatsApp: Mesmo n√∫mero
- Email: acontato@clyon.pt

üìã **Ou preencher o formul√°rio de or√ßamento** para receber uma proposta detalhada.

Tem mais alguma d√∫vida sobre os nossos servi√ßos?`
    }
    
    // Resposta gen√©rica
    return `Obrigado pela sua mensagem! Para lhe dar o melhor or√ßamento poss√≠vel, preciso de algumas informa√ß√µes:

üîç **Informa√ß√µes importantes:**
1. **Tipo de res√≠duo:** Entulho, m√≥veis, jardim, etc.
2. **Quantidade:** N√∫mero de sacos, m¬≥ ou descri√ß√£o
3. **Localiza√ß√£o:** Cidade e condi√ß√µes de acesso
4. **Urg√™ncia:** Quando precisa do servi√ßo

üí° **Dica:** Quanto mais detalhes fornecer, mais preciso ser√° o or√ßamento!

Pode come√ßar por me dizer que tipo de material precisa de recolher?`
  }

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault()
      handleSendMessage()
    }
  }

  const suggestedQuestions = [
    "Quanto custa recolher entulho de uma pequena obra?",
    "Preciso de recolher m√≥veis velhos em Lisboa",
    "Recolha de res√≠duos de jardim urgente",
    "Quanto custa recolher um frigor√≠fico?"
  ]

  return (
    <div className="min-h-screen">
      {/* Hero Section */}
      <section className="clyon-hero text-white py-16">
        <div className="clyon-container text-center">
          <Calculator className="h-16 w-16 mx-auto mb-4" />
          <h1 className="text-4xl md:text-5xl font-bold mb-4">Simula√ß√£o de Or√ßamento</h1>
          <p className="text-xl opacity-90 max-w-2xl mx-auto">
            Chat inteligente para simular or√ßamentos de recolha de res√≠duos
          </p>
        </div>
      </section>

      {/* Chat Interface */}
      <section className="clyon-section bg-gray-50">
        <div className="clyon-container max-w-4xl mx-auto">
          <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
            {/* Chat Principal */}
            <div className="lg:col-span-3">
              <Card className="h-[600px] flex flex-col">
                <CardHeader className="border-b">
                  <CardTitle className="flex items-center">
                    <Bot className="h-6 w-6 text-primary mr-2" />
                    Assistente Virtual CLYON
                    <span className="ml-auto text-sm font-normal text-green-600 flex items-center">
                      <div className="w-2 h-2 bg-green-500 rounded-full mr-2"></div>
                      Online
                    </span>
                  </CardTitle>
                </CardHeader>
                
                <CardContent className="flex-1 overflow-y-auto p-4 space-y-4">
                  {messages.map((message, index) => (
                    <div
                      key={index}
                      className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}
                    >
                      <div
                        className={`max-w-[80%] rounded-lg p-3 ${
                          message.role === 'user'
                            ? 'clyon-primary text-white'
                            : 'bg-white border shadow-sm'
                        }`}
                      >
                        <div className="flex items-start space-x-2">
                          {message.role === 'assistant' && (
                            <Bot className="h-5 w-5 text-primary mt-0.5 flex-shrink-0" />
                          )}
                          {message.role === 'user' && (
                            <User className="h-5 w-5 text-white mt-0.5 flex-shrink-0" />
                          )}
                          <div className="whitespace-pre-wrap text-sm leading-relaxed">
                            {message.content}
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                  
                  {isLoading && (
                    <div className="flex justify-start">
                      <div className="bg-white border shadow-sm rounded-lg p-3 max-w-[80%]">
                        <div className="flex items-center space-x-2">
                          <Bot className="h-5 w-5 text-primary" />
                          <Loader2 className="h-4 w-4 animate-spin text-primary" />
                          <span className="text-sm text-gray-600">A escrever...</span>
                        </div>
                      </div>
                    </div>
                  )}
                  
                  <div ref={messagesEndRef} />
                </CardContent>
                
                <div className="border-t p-4">
                  <div className="flex space-x-2">
                    <Textarea
                      value={inputMessage}
                      onChange={(e) => setInputMessage(e.target.value)}
                      onKeyPress={handleKeyPress}
                      placeholder="Descreva o que precisa de recolher..."
                      className="flex-1 min-h-[40px] max-h-[120px] resize-none"
                      rows={1}
                    />
                    <Button 
                      onClick={handleSendMessage}
                      disabled={!inputMessage.trim() || isLoading}
                      className="clyon-button"
                    >
                      <Send className="h-4 w-4" />
                    </Button>
                  </div>
                  
                  {/* Sugest√µes */}
                  {messages.length === 1 && (
                    <div className="mt-3">
                      <p className="text-xs text-gray-500 mb-2">Sugest√µes:</p>
                      <div className="flex flex-wrap gap-2">
                        {suggestedQuestions.map((question, index) => (
                          <button
                            key={index}
                            onClick={() => setInputMessage(question)}
                            className="text-xs bg-gray-100 hover:bg-gray-200 rounded-full px-3 py-1 transition-colors"
                          >
                            {question}
                          </button>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              </Card>
            </div>

            {/* Sidebar */}
            <div className="space-y-6">
              {/* Informa√ß√µes */}
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Como Funciona</CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  <div className="flex items-start space-x-2">
                    <Lightbulb className="h-4 w-4 text-primary mt-1 flex-shrink-0" />
                    <div>
                      <p className="text-sm font-medium">Simula√ß√£o Inteligente</p>
                      <p className="text-xs text-gray-600">Descreva o que precisa e receba uma estimativa</p>
                    </div>
                  </div>
                  
                  <div className="flex items-start space-x-2">
                    <Calculator className="h-4 w-4 text-primary mt-1 flex-shrink-0" />
                    <div>
                      <p className="text-sm font-medium">Or√ßamento Aproximado</p>
                      <p className="text-xs text-gray-600">Valores indicativos baseados na descri√ß√£o</p>
                    </div>
                  </div>
                  
                  <div className="flex items-start space-x-2">
                    <CheckCircle className="h-4 w-4 text-primary mt-1 flex-shrink-0" />
                    <div>
                      <p className="text-sm font-medium">Sem Compromisso</p>
                      <p className="text-xs text-gray-600">Simula√ß√£o gratuita e sem obriga√ß√µes</p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* Contacto Direto */}
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Contacto Direto</CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                  <p className="text-sm text-gray-600">
                    Para or√ßamentos oficiais ou servi√ßos urgentes:
                  </p>
                  
                  <Button asChild variant="outline" className="w-full border-primary text-primary hover:bg-primary hover:text-white">
                    <a href="tel:+351931632622">
                      <Phone className="mr-2 h-4 w-4" />
                      +351 931 632 622
                    </a>
                  </Button>

                  <Button asChild className="w-full clyon-button">
                    <a href="https://wa.me/351931632622" target="_blank" rel="noopener noreferrer">
                      <MessageCircle className="mr-2 h-4 w-4" />
                      WhatsApp
                    </a>
                  </Button>
                </CardContent>
              </Card>

              {/* Aviso */}
              <Card className="bg-yellow-50 border-yellow-200">
                <CardContent className="p-4">
                  <div className="flex items-start space-x-2">
                    <AlertCircle className="h-5 w-5 text-yellow-600 mt-0.5 flex-shrink-0" />
                    <div>
                      <p className="text-sm font-medium text-yellow-800">Importante</p>
                      <p className="text-xs text-yellow-700 mt-1">
                        Esta √© uma simula√ß√£o. Para or√ßamentos oficiais, 
                        contacte-nos diretamente ou preencha o formul√°rio de or√ßamento.
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        </div>
      </section>

      {/* CTA Section */}
      <section className="clyon-section clyon-gradient text-white">
        <div className="clyon-container text-center">
          <h2 className="text-3xl md:text-4xl font-bold mb-4">
            Gostou da simula√ß√£o?
          </h2>
          <p className="text-xl mb-8 opacity-90">
            Solicite um or√ßamento oficial ou contacte-nos diretamente
          </p>
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <Button size="lg" variant="outline" className="text-black border-white hover:bg-white hover:text-primary" asChild>
              <a href="/orcamentos">Or√ßamento Oficial</a>
            </Button>
            <Button size="lg" variant="outline" className="text-black border-white hover:bg-white hover:text-primary" asChild>
              <a href="/contato">Contactar-nos</a>
            </Button>
          </div>
        </div>
      </section>
    </div>
  )
}

export default Simulacao

